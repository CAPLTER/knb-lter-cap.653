## setup

```{r}
#| eval: true
#| label: connection

source("~/Documents/localSettings/pg_local.R")
pg <- pg_local_connect("caplter")
```

```{r}
#| eval: true
#| label: resources

source("~/localRepos/knb-lter-cap.652/esca_sql_queries.R")
source("~/localRepos/knb-lter-cap.652/esca_sites_grid.R")
```


## parcel characteristics

```{r}
#| eval: true
#| label: parcel_characteristics 

parcel_characteristics <- get_parcel_characteristics("parcel")

parcel_characteristics <- parcel_characteristics |>
  dplyr::mutate(
    parcel_survey_type                = as.factor(parcel_survey_type),
    parcel_social_class               = as.factor(parcel_social_class),
    parcel_appearance                 = as.factor(parcel_appearance),
    parcel_orderliness                = as.factor(parcel_orderliness),
    presence_of_bird_feeder           = as.factor(presence_of_bird_feeder),
    presence_of_water_feature         = as.factor(presence_of_water_feature),
    presence_of_porch_patio           = as.factor(presence_of_porch_patio),
    presence_of_cats                  = as.factor(presence_of_cats),
    presence_of_dogs                  = as.factor(presence_of_dogs),
    presence_of_pet_waste             = as.factor(presence_of_pet_waste),
    presence_of_statues               = as.factor(presence_of_statues),
    presence_of_flagpole              = as.factor(presence_of_flagpole),
    presence_of_cars_yard             = as.factor(presence_of_cars_yard),
    presence_of_potted_plant          = as.factor(presence_of_potted_plant),
    presence_of_play_equip            = as.factor(presence_of_play_equip),
    presence_of_lawn_ornaments        = as.factor(presence_of_lawn_ornaments),
    presence_of_furniture             = as.factor(presence_of_furniture),
    presence_of_river_bed             = as.factor(presence_of_river_bed),
    presence_of_yard_topography       = as.factor(presence_of_yard_topography),
    presence_of_litter                = as.factor(presence_of_litter),
    presence_of_veg_litter            = as.factor(presence_of_veg_litter),
    presence_of_yard_tools            = as.factor(presence_of_yard_tools),
    presence_of_light_post            = as.factor(presence_of_light_post),
    presence_of_other                 = as.factor(presence_of_other),
    presence_of_irrigation_flood      = as.factor(presence_of_irrigation_flood),
    presence_of_irrigation_drip       = as.factor(presence_of_irrigation_drip),
    presence_of_irrigation_hose       = as.factor(presence_of_irrigation_hose),
    presence_of_irrigation_sprinklers = as.factor(presence_of_irrigation_sprinklers),
    landscape_type                    = as.factor(landscape_type),
    amount_grass                      = as.factor(amount_grass),
    weed_quantity_mesic               = as.factor(weed_quantity_mesic),
    weed_quantity_xeric               = as.factor(weed_quantity_xeric),
    presence_of_weeds_other           = as.factor(presence_of_weeds_other),
    parcel_pruning_trees              = as.factor(parcel_pruning_trees),
    parcel_pruning_shrubs             = as.factor(parcel_pruning_shrubs),
    parcel_grass_patchiness           = as.factor(parcel_grass_patchiness),
    lawn_health                       = as.factor(lawn_health),
    lawn_quality                      = as.factor(lawn_quality),
    presence_of_lawn_trimmed          = as.factor(presence_of_lawn_trimmed),
    presence_of_recent_cut            = as.factor(presence_of_recent_cut)
  )

try({
  capeml::write_attributes(parcel_characteristics, overwrite = FALSE)
  capeml::write_factors(parcel_characteristics, overwrite = FALSE)
})

```


## landscape irrigation

```{r}
#| eval: TRUE
#| label: landscape_irrigation

landscape_irrigation <- get_landscape_irrigation("parcel")

landscape_irrigation <- landscape_irrigation |>
  dplyr::mutate(
    dplyr::across(
      c(
        appears_maintained,
        appears_professional,
        appears_healthy,
        appears_injured,
        presence_of_open_ground,
        presence_of_trees,
        presence_of_shrubs,
        presence_of_cacti_succ,
        presence_of_lawn,
        presence_of_herbaceous_ground,
        presence_of_other,
        presence_of_hand_water,
        presence_of_drip_water,
        presence_of_overhead_water,
        presence_of_flood_water,
        presence_of_subterranean_water,
        presence_of_no_water,
        presence_of_pervious_irrigation
      ),
      ~ if (all(is.na(.x))) .x else as.factor(.x)
    )
  )

try({
  capeml::write_attributes(landscape_irrigation, overwrite = FALSE)
  capeml::write_factors(landscape_irrigation, overwrite = FALSE)
})

```


## trees 

```{r}
#| eval: TRUE
#| label: trees 

trees <- get_trees("parcel") |>
  dplyr::mutate(
    vegetation_shape_code          = as.factor(vegetation_shape_code),
    vegetation_classification_code = as.factor(vegetation_classification_code),
    canopy_condition               = as.factor(canopy_condition)
  ) |>
  dplyr::select(
    sample_date,
    site_code,
    vegetation_scientific_name,
    vegetation_classification_code,
    vegetation_shape_code,
    height = height_in_m,
    crown_width_ns,
    crown_width_ew,
    stem_diameter,
    stem_height = stem_diameter_at,
    stem_count,
    missing_branches,
    canopy_condition
  )

try({
  capeml::write_attributes(trees, overwrite = FALSE)
  capeml::write_factors(trees, overwrite = FALSE)
})

```


## number perennials

```{r}
#| eval: TRUE
#| label: number-perennials

number_perennials <- DBI::dbGetQuery(
  conn      = pg,
  statement = "
  WITH count_sums AS (
  SELECT
    sampling_events.survey_id,
    vegetation_samples.vegetation_taxon_id,
    cv_plant_count_survey_types.plant_count_type_id,
    SUM(vegetation_survey_plant_counts.count_survey_value) AS number_plants
  FROM survey200.vegetation_survey_plant_counts
  JOIN survey200.vegetation_samples ON (vegetation_survey_plant_counts.vegetation_sample_id = vegetation_samples.vegetation_sample_id)
  JOIN survey200.sampling_events_vegetation_samples ON (vegetation_samples.vegetation_sample_id = sampling_events_vegetation_samples.vegetation_sample_id)
  JOIN survey200.sampling_events ON (sampling_events_vegetation_samples.survey_id = sampling_events.survey_id)
  JOIN survey200.cv_plant_count_survey_types ON (cv_plant_count_survey_types.plant_count_type_id = vegetation_survey_plant_counts.plant_count_type_id)
  GROUP BY
    sampling_events.survey_id,
    vegetation_samples.vegetation_taxon_id,
    cv_plant_count_survey_types.plant_count_type_id
  )
  SELECT
    sites.site_code,
    sampling_events.samp_date AS sample_date,
    vegetation_taxon_list.vegetation_scientific_name,
    count_sums.number_plants,
    cv_plant_count_survey_types.plant_count_type_code
  FROM count_sums
  JOIN survey200.sampling_events ON (sampling_events.survey_id = count_sums.survey_id)
  JOIN survey200.sites ON (sites.site_id = sampling_events.site_id)
  JOIN survey200.vegetation_taxon_list ON (vegetation_taxon_list.vegetation_taxon_id = count_sums.vegetation_taxon_id)
  JOIN survey200.cv_plant_count_survey_types ON (cv_plant_count_survey_types.plant_count_type_id = count_sums.plant_count_type_id)
  WHERE
    sites.research_focus = 'parcel' AND
    count_sums.number_plants > 0
  ORDER BY
    EXTRACT (YEAR FROM sampling_events.samp_date),
    sites.site_code,
    count_sums.number_plants DESC
  ;
"
)

try({
  capeml::write_attributes(number_perennials, overwrite = FALSE)
  capeml::write_factors(number_perennials, overwrite = FALSE)
})

```


## hedges

```{r}
#| eval: FALSE
#| label: hedges 

still, there are not any parcel hedges as of 2023

# hedges <- get_hedges('parcel') %>% 
#   mutate(
#     vegetation_shape_code = as.factor(vegetation_shape_code),
#     hedge_condition = tolower(hedge_condition),
#     hedge_condition = as.factor(hedge_condition)
#   )

```


## landuse

```{r}
#| eval: TRUE
#| label: landuse 

landuse <- get_landuse("parcel")

try({capeml::write_attributes(landuse, overwrite = FALSE)})

```


## neighborhood characteristics

```{r}
#| eval: TRUE
#| label: neighborhood_characteristics 

neighborhood_characteristics <- get_neighborhood_characteristics("parcel") |>
  dplyr::mutate(
    dplyr::across(
      c(
        neigh_social_class,
        neigh_buildings_residential,
        neigh_buildings_commercial,
        neigh_buildings_institutional,
        neigh_buildings_industrial,
        neigh_residence_apartments,
        neigh_residence_multi_family,
        neigh_residence_single_family,
        neigh_irrigation_drip_trickle,
        neigh_irrigation_flood_hand,
        neigh_irrigation_overhead_spray,
        neigh_yard_upkeep_good,
        neigh_yard_upkeep_poor,
        neigh_yard_upkeep_professionally_maintained,
        neigh_landscape_mesic,
        neigh_landscape_mixed,
        neigh_landscape_xeric,
        neigh_landscape_turf_present,
        neigh_traffic_collector_street,
        neigh_traffic_cul_de_sac,
        neigh_traffic_dirt_road,
        neigh_traffic_freeway_expressway,
        neigh_traffic_highway,
        neigh_traffic_major_city_road,
        neigh_traffic_none,
        neigh_traffic_paved_local_street
      ),
      ~ if (all(is.na(.x))) as.character(.x) else as.factor(.x)
    )
  )

try({
  capeml::write_attributes(neighborhood_characteristics, overwrite = FALSE)
  capeml::write_factors(neighborhood_characteristics, overwrite = FALSE)
})

```


## structures

Since we are not pulling any measurements from the structures table (if and
until clinometer data are resolved), there seems little value in these data. All
values save one (`model`) are residential, which goes without saying as these
are parcel data. We will omit these data from the package unless we can identify
value in presenting them.

```{r}
#| eval: FALSE
#| label: structures

structures <- get_structures("parcel") |>
  dplyr::mutate(
    structure_use = dplyr::case_when(
      grepl("resi", structure_use, ignore.case = TRUE) ~ "residential",
      TRUE ~ structure_use
    ),
    structure_use = as.factor(structure_use)
  )

try({
  capeml::write_attributes(structures, overwrite = FALSE)
  capeml::write_factors(structures, overwrite = FALSE)
})

```


## sampling events

```{r}
#| eval: TRUE
#| label: sampling_events

sampling_events <- DBI::dbGetQuery(
  conn      = pg,
  statement = "
  SELECT
    sampling_events.samp_date AS sample_date,
    sites.site_code,
    hi.weather_on_the_day,
    hi.weather_recent_rain_notes,
    hi.general_description
  FROM survey200.sampling_events
  JOIN survey200.sites ON (sampling_events.site_id = sites.site_id)
  JOIN survey200.human_indicators hi ON (sampling_events.survey_id = hi.survey_id)
  -- LEFT JOIN survey200.sites_geography ON (sites_geography.survey_id = sampling_events.survey_id)
  WHERE
    sites.research_focus::text = 'parcel'::text
  ORDER BY
    EXTRACT (YEAR FROM sampling_events.samp_date),
    sites.site_code
    ;
    "
)

try({capeml::write_attributes(sampling_events, overwrite = FALSE)})

```


## coverages

```{r}
#| eval: TRUE
#| label: coverages

cells_with_parcels <- cells_with_points |>
  dplyr::filter(site_code %in% sampling_events$site_code)

coverage <- EML::set_coverage(
  begin                 = as.character(as.Date(min(sampling_events$sample_date))),
  end                   = as.character(as.Date(max(sampling_events$sample_date))),
  geographicDescription = capeml::read_package_configuration()[[
    "geographic_description"
  ]],
  west                  = sf::st_bbox(cells_with_parcels)[["xmin"]],
  east                  = sf::st_bbox(cells_with_parcels)[["xmax"]],
  north                 = sf::st_bbox(cells_with_parcels)[["ymax"]],
  south                 = sf::st_bbox(cells_with_parcels)[["ymin"]]
)

```

## taxonomic coverage

```{r}
#| eval: TRUE
#| label: taxonomic-coverage

my_path <- getwd()

taxa <- dplyr::bind_rows(
  trees |>
    dplyr::distinct(vegetation_scientific_name),
  number_perennials |>
    dplyr::distinct(vegetation_scientific_name)
) |>
  as.data.frame()

taxonomyCleanr::create_taxa_map(
  path = my_path,
  x    = taxa,
  col  = "vegetation_scientific_name"
)

taxonomyCleanr::resolve_sci_taxa(
  path         = my_path,
  data.sources = c(3, 11)
)

taxaCoverage <- taxonomyCleanr::make_taxonomicCoverage(path = my_path)

coverage$taxonomicCoverage <- taxaCoverage

```


## build

```{r}
#| eval: TRUE
#| label: build

dataset <- capeml::create_dataset()
eml     <- capeml::create_eml()

EML::eml_validate(eml)
capeml::write_cap_eml()

source("~/Documents/localSettings/aws.s3")

lapply(
  X   = list.files(pattern = "653_"),
  FUN = capeml::data_to_amz
)

source("~/Documents/localSettings/edi.R")
capeml::get_package_evaluation(full_report = FALSE)

report <- capeml::get_package_evaluation(full_report = TRUE)
xml2::write_xml(report, "/tmp/report.xml")

capeml::create_package(environment = "staging")

EDIutils::logout()

```